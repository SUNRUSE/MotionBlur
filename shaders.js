var Shaders = {
    vertex: [
        "#ifdef GL_ES", 
        "precision mediump float;",
        "#endif",
        "attribute vec3 location;",
        "attribute vec2 uv;",
        "attribute vec4 color;",
        "attribute float exponent;",
        "varying vec2 var_uv;",
        "varying vec4 var_color;",
        "varying float var_exponent;",
        "uniform mat4 oldTransform;",
        "uniform mat4 newTransform;",
        "uniform vec2 aspect;",
        "vec3 applyTransform(mat4 transform) {",
            "return (vec4(location, 1.0) * transform).xyz;",
        "}",
        "void main() {",
            "vec3 oldLocation = applyTransform(oldTransform);",
            "vec3 newLocation = applyTransform(newTransform);",
            "vec2 norm = normalize(newLocation.xy / newLocation.z - oldLocation.xy / oldLocation.z);",
            "vec2 uv2 = sign(uv);",
            "vec2 uv3 = uv2 * 0.5 + 0.5;",
            "gl_Position = vec4(aspect * (mix(oldLocation.xy, newLocation.xy, uv3.y) + uv.x * norm.yx * vec2(1.0, -1.0) + uv.y * norm), 0.0, mix(oldLocation.z, newLocation.z, uv3.y));",
            "var_uv = uv2;",
            "var_color = color;",
            "var_exponent = exponent;",
        "}"
    ].join("\n"),
    fragment: [
        "#ifdef GL_ES", 
        "precision mediump float;",
        "#endif",
        "varying vec2 var_uv;",
        "varying vec4 var_color;",
        "varying float var_exponent;",
        "void main() {",
            "float intensity = pow(1.0 - min(length(var_uv), 1.0), var_exponent);",
            "gl_FragColor = intensity * var_color;",
        "}"
    ].join("\n")
}